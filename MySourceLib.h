#pragma once

using namespace std;


double maxrealnumber=pow(10,300);
double minrealnumber=pow(10,-300);
double pi=3.14159265358979;
double spi=0.398942280401433;
double expm2 = 0.13533528323661269189;
double s2pi=2.50662827463100050242;
double igammaepsilon = 0.000000000000001;
double igammabignumber = 4503599627370496.0;
double igammabignumberinv = 2.22044604925031308085 * 0.0000000000000001;
double logpi = 1.14472988584940017414;
double ls2pi = 0.91893853320467274178;
double machineepsilon = 5 *pow(10, -16);

double algdiv ( double *a, double *b );
double alnrel ( double *a );
double apser ( double *a, double *b, double *x, double *eps );
double bcorr ( double *a0, double *b0 );
double beta ( double a, double b );
double beta_asym ( double *a, double *b, double *lambda, double *eps );
double beta_frac ( double *a, double *b, double *x, double *y, double *lambda, double *eps );
void beta_grat ( double *a, double *b, double *x, double *y, double *w, double *eps,int *ierr );
void beta_inc ( double *a, double *b, double *x, double *y, double *w, double *w1, int *ierr );
void beta_inc_values ( int *n_data, double *a, double *b, double *x, double *fx );
double beta_log ( double *a0, double *b0 );
double beta_pser ( double *a, double *b, double *x, double *eps );
double beta_rcomp ( double *a, double *b, double *x, double *y );
double beta_rcomp1 ( int *mu, double *a, double *b, double *x, double *y );
double beta_up ( double *a, double *b, double *x, double *y, int *n, double *eps );
void binomial_cdf_values ( int *n_data, int *a, double *b, int *x, double *fx );
void cdfbet ( int *which, double *p, double *q, double *x, double *y,  double *a, double *b, int *status, double *bound );
void cdfbin ( int *which, double *p, double *q, double *s, double *xn, double *pr, double *ompr, int *status, double *bound );
void cdfchi ( int *which, double *p, double *q, double *x, double *df, int *status, double *bound );
void cdfchn ( int *which, double *p, double *q, double *x, double *df, double *pnonc, int *status, double *bound );
void cdff ( int *which, double *p, double *q, double *f, double *dfn, double *dfd, int *status, double *bound );
void cdffnc ( int *which, double *p, double *q, double *f, double *dfn, double *dfd, double *phonc, int *status, double *bound );
void cdfgam ( int *which, double *p, double *q, double *x, double *shape, double *scale, int *status, double *bound );
void cdfnbn ( int *which, double *p, double *q, double *s, double *xn, double *pr, double *ompr, int *status, double *bound );
void cdfnor ( int *which, double *p, double *q, double *x, double *mean, double *sd, int *status, double *bound );
void cdfpoi ( int *which, double *p, double *q, double *s, double *xlam,  int *status, double *bound );
void cdft ( int *which, double *p, double *q, double *t, double *df,  int *status, double *bound );
void chi_noncentral_cdf_values ( int *n_data, double *x, double *lambda,  int *df, double *cdf );
void chi_square_cdf_values ( int *n_data, int *a, double *x, double *fx );
void cumbet ( double *x, double *y, double *a, double *b, double *cum, double *ccum );
void cumbin ( double *s, double *xn, double *pr, double *ompr, double *cum, double *ccum );
void cumchi ( double *x, double *df, double *cum, double *ccum );
void cumchn ( double *x, double *df, double *pnonc, double *cum, double *ccum );
void cumf ( double *f, double *dfn, double *dfd, double *cum, double *ccum );
void cumfnc ( double *f, double *dfn, double *dfd, double *pnonc,double *cum, double *ccum );
void cumgam ( double *x, double *a, double *cum, double *ccum );
void cumnbn ( double *s, double *xn, double *pr, double *ompr,double *cum, double *ccum );
void cumnor ( double *arg, double *result, double *ccum );
void cumpoi ( double *s, double *xlam, double *cum, double *ccum );
void cumt ( double *t, double *df, double *cum, double *ccum );
double dbetrm ( double *a, double *b );
double dexpm1 ( double *x );
double dinvnr ( double *p, double *q );
void dinvr ( int *status, double *x, double *fx, unsigned long *qleft, unsigned long *qhi );
double dlanor ( double *x );
double dpmpar ( int *i );
void dstinv ( double *zsmall, double *zbig, double *zabsst, double *zrelst, double *zstpmu, double *zabsto, double *zrelto );
double dstrem ( double *z );
void dstzr ( double *zxlo, double *zxhi, double *zabstl, double *zreltl );
double dt1 ( double *p, double *q, double *df );
void dzror ( int *status, double *x, double *fx, double *xlo, double *xhi, unsigned long *qleft, unsigned long *qhi );
void E0000 ( int IENTRY, int *status, double *x, double *fx, unsigned long *qleft, unsigned long *qhi, double *zabsst,
double *zabsto, double *zbig, double *zrelst, double *zrelto, double *zsmall, double *zstpmu );
void E0001 (int IENTRY, int *status, double *x, double *fx, double *xlo, double *xhi, unsigned long *qleft,
  unsigned long *qhi, double *zabstl, double *zreltl, double *zxhi, double *zxlo );
void erf_values ( int *n_data, double *x, double *fx );
double error_f ( double *x );
double error_fc ( int *ind, double *x );
double esum ( int *mu, double *x );
double eval_pol ( double a[], int *n, double *x );
double exparg ( int *l );
void f_cdf_values ( int *n_data, int *a, int *b, double *x, double *fx );
void f_noncentral_cdf_values ( int *n_data, int *a, int *b, double *lambda, double *x, double *fx );
double fifdint ( double a );
double fifdmax1 ( double a, double b );
double fifdmin1 ( double a, double b );
double fifdsign ( double mag, double sign );
long fifidint ( double a );
long fifmod ( long a, long b );
double fpser ( double *a, double *b, double *x, double *eps );
void ftnstop ( string msg );
double gam1 ( double *a );
void gamma_inc ( double *a, double *x, double *ans, double *qans, int *ind );
void gamma_inc_inv ( double *a, double *x, double *x0, double *p, double *q, int *ierr );
void gamma_inc_values ( int *n_data, double *a, double *x, double *fx );
double gamma_ln1 ( double *a );
double gamma_log ( double *a );
void gamma_rat1 ( double *a, double *x, double *r, double *p, double *q, double *eps );
void gamma_values ( int *n_data, double *x, double *fx );
double gamma_x ( double *a );
double gsumln ( double *a, double *b );
int ipmpar ( int *i );
void negative_binomial_cdf_values ( int *n_data, int *f, int *s, double *p,  double *cdf );
void normal_cdf_values ( int *n_data, double *x, double *fx );
void poisson_cdf_values ( int *n_data, double *a, int *x, double *fx );
double psi ( double *xx );
void psi_values ( int *n_data, double *x, double *fx );
double rcomp ( double *a, double *x );
double rexp ( double *x );
double rlog ( double *x );
double rlog1 ( double *x );
void student_cdf_values ( int *n_data, int *a, double *x, double *fx );
double stvaln ( double *p );
double alnorm ( double x, bool upper );
double prncst ( double &st, int &idf, double &d,int &ifault);
double tfn ( double x, double fx );
double betain ( double x, double p, double q, double beta, int &ifault );
void cdftnc(int &which, double &p, double &q, double &t, double &df, double &pnonc, int &status, double &bound);

double invnormaldistribution(double y0);
double normaldistribution(double x);
double invnontap(double beta, int f, double d);
double incompletegamma(double a, double x);
double incompletegammac(double a, double x);
double invincompletegammac(double a, double y0);
double invchisquaredistribution(double v, double y);
double chisquaredistribution(double v, double x);
void cum(int n, double* x, int* r, int& k, double* fcum, double* ycum);
double incompletebetaps(double a, double b, double x, double maxgam);
double incompletebetafe(double a, double b, double x, double big, double biginv);
double incompletebetafe2(double a, double b, double x, double big, double biginv);
double incompletebeta(double a, double b, double x);
double incompletebeta(double a, double b, double x);
double fdistribution(double a, double b, double x);
double studenttdistr(int k, double t);
double invincompletebeta(double a, double b, double y);
double invstudenttdistr(int k, double p);
double invfdistribution(int a, int  b, double y);
void lmtaprn(double beta,int n,double t1,double t2,double t12,double zp,double* xp);
double binom(double a, double b, double x);
void fatiq(int k, double* w, double* cx, double* y, double& pv, double& an, double& alpha, double& q, double& da, double& db);
void qsort_1(double *a, int lo, int hi);
int compare(const void* a, const void* b);
void myswap(double& ax, double& ay);
void MleastSquare(int n,int k,double **x,double **y,double **&db,double **&b,double *&yr);
void MleastSquare_weight(int n,int k,double **x,double **y,double **v,double **&db,double **&b,double *&yr);
void ordern(int n, double pr, double ps, double& er, double& vrs);
void orderw(int n, double pr, double ps, double& er, double& vrs);
void randomsample(int k, int* r);
void planmatrix(int k, int** x);


double fun1(double* xsimpl);
double fun2(double* xsimpl);
void CovMatrixMleN(int n,double*x,int* r,double a, double s, double **&v);
void CovMatrixMleW(int n,double*x,int* r,double c, double b, double **&v);
void simpl(double*xsimpl, double step, double eps, int &lim,int &ier,int nx,double &q,double(*fn)(double*));
void lmtexact(double beta,int n,double prob,double &t);
void lmtexactbeta(double &beta,int n,double prob,double t);

double** TransMatrix(int m, int n, double** a);
double **MultiplyMatrix(int rowsa, int colsa, int rowsb,int colsb,double **a,double **b);
void clearMemory(double** a, int n);
double** InverseMatrix(double** a, int n);


long int TestPerm(int kk,int* m,vector<double>&h,double(*critfun)(int*, int, int, int*));
void standart(int n,double *x,double &mean,double &s);
void qsortRecursive(double *mas, long int size);
double fisherstatistic(int* a,int kx,int n,int* m);
double vandervardenstatistic(int* a,int kx,int n,int* m);
double caponstatistic(int* a,int kx,int n,int* m);
double klotzstatistic(int* a,int kx,int n,int* m);
double moodstatistic(int* a, int kx,int n,int* m);
double lemanstatistic(int* a, int kx, int n, int* m);
double kruskalstatistic(int* aa, int kx, int n, int* m);
int seriesstatistic(int n, int* aa, int* col);
double davidstatistic(int* a, int kx,int n,int* m);
long int wilcoxon_exact(int *m,double *wrange, double *pw);
int series_exact(int* m, double *wrange,double *pw);
double ansaristatistic(int* a,int kx,int n, int* m);
double wilcoxonstatistic(int* a,int kx, int n,int* m);
void swap(double& ax, double& ay);
void swap1(int& ax, int& ay);
long int count_perm(int k, int* m);
long int ansari_exact(int *m,int* astat, double* pw);
int* frqadd(int* f1, int* f2, int l1in, int l1out, int l2, int nstart);
int* imply(int* f1, int* f2, int l1in, int l1out, int l2, int noff);
int gscale(int test, int other, int* pw);
int start2(int n, int* f);
int start1(int n, int* f);


double cns2(int kx, int n, int m[]);
double cnm(int n, int m);
void sort_0(double* x, long n);
void sort_1(double* x, long n);
void xmetka(double* x, int k, int* m, int* metka);
void wilcoxon(double* x, int k, int n1,int n2, double alpha, double &rstat, double &zw, double &zwcrit);
void leman(double* x, int k, int n1,int n2,double alpha, double &rstat, double &zr, double &zrcrit);
void series(double* x, int k, int n1,int n2, double alpha, int* col, int& ksr, int& kx, double* p, int* w);
void krusk(double* x, int k, int* m, double alpha, double& hstat, double& hcrit);
double funame(int cname, int* a, int kx, int n, int* m);
void rndvalue(int n, double* x);
int signet(int a, int b);
int testr(int a, int b, int c);
void signe_Rec(int n, double* p);
void wilc_Rec(int m, int n, double* p, double* wrange);
void ansari(double* x, int k, int n1, int n2, double alpha, double& astat, double& zw, double& zwcrit);
void mood(double* x, int k, int n1, int n2, double alpha, double& astat, double& zw, double& zwcrit);
void david(double* x, int k, int n1, int n2, double alpha, double& astat, double& zw, double& zwcrit);
void msigne(int n, double* x, double alpha, double median, double& bothtails, double& lefttail, double& righttail);
void wsigne(int n, double* x, double* y, double alpha, double& wstat, double* wrange, double* wdistr);
void sigel(double* x, int k, int n1, int n2, double alpha, double* wrange, double* wdistr, int& rmin, int& rmax, double& zstat, double& zcrit);
 double Normal_function_to_minimize(const array<double, 2>& xsimpl);
double Weibull_function_to_minimize(const array<double,1>& xsimpl);
double UpDownMinimize(const array<double,2>& xsimpl);
 void CovMatrixUpDown(string ts,double stepx,double bint,double **&v);

double sf35r(double x);
double sf49r( double x);
double sf53r(double y,double z,double eps);
double sf54r(double x,double d,double idf);
